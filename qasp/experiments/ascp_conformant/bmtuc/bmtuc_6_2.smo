%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Usage:                              
%     lparse -c h=<height> -c w=<width> | smodels
% The program consists of the following main predicates
%	holds(L,T,P) - if literal L holds at (T,P)
%	ph(L,T,P) - if literal L possibly holds at (T,P)
%	poss(A,T,P) - if action A is executable at (T,P)
%	occ(A,T,P) - if action A occurs at (T,P)
%	used(T,P) - if starting from T, the path P is 
%		used in constructing the plan.
%	br(g,T,P,P_1) - if there exists a branch from (T,P)
%		to (T+1,P_1)
%	goal(T,P) - if the goal is satisified at (T,P)
%	pc(L,T,P) - if L may change in the next state
%	e(L,T,P) - if literal L is an effect of some action
%		occuring at (T,P).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input parameters
time(1..h).
time1(1..h+1).
path(1..w).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Action declarations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
action(dunk(p1,t1)).
action(dunk(p1,t2)).
action(dunk(p2,t1)).
action(dunk(p2,t2)).
action(dunk(p3,t1)).
action(dunk(p3,t2)).
action(dunk(p4,t1)).
action(dunk(p4,t2)).
action(dunk(p5,t1)).
action(dunk(p5,t2)).
action(dunk(p6,t1)).
action(dunk(p6,t2)).
action(flush(t1)).
action(flush(t2)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fluent declarations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fluent(armed(p1)).
fluent(armed(p2)).
fluent(armed(p3)).
fluent(armed(p4)).
fluent(armed(p5)).
fluent(armed(p6)).
fluent(dunked(p1)).
fluent(dunked(p2)).
fluent(dunked(p3)).
fluent(dunked(p4)).
fluent(dunked(p5)).
fluent(dunked(p6)).
fluent(clogged(t1)).
fluent(clogged(t2)).
fluent(disarmed).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DOMAIN INDEPENDENT RULES 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Auxiliary Rules
literal(F) :-
	fluent(F).
literal(neg(F)) :-
	fluent(F).

contrary(F,neg(F)) :-
	fluent(F).
contrary(neg(F),F) :-
	fluent(F).

ph(L,T,P) :-
	literal(L),
	time(T),
	path(P),
	literal(L1),
	contrary(L,L1),
	not holds(L1,T,P).

used(1,1).
used(T+1,P) :-
	time(T),
	path(P),
	used(T,P).

% Goal representation
goal(T+1,P) :-
	time(T),
	path(P),
	goal(T,P).

:- path(P),
	used(h+1,P),
	not goal(h+1,P).

% Inertial rules for non-sensing actions
holds(L,T+1,P) :-
	literal(L),
	time(T),
	path(P),
	e(L,T+1,P).

holds(L,T+1,P) :-
	literal(L),
	time(T),
	path(P),
	holds(L,T,P),
	literal(L1),
	contrary(L,L1),
	not pc(L1,T+1,P).

% Inertial rules for sensing actions
new_br(P,P1) :-
	path(P),
	path(P1),
	P < P1.

:- sense(G1),
	sense(G2),
	time(T),
	path(P),
	path(P1),
	path(P2),
	P1 < P2,
	P2 < P,
	br(G1,T,P1,P),
	br(G2,T,P2,P).

:- sense(G1),
	sense(G2),
	neq(G1,G2),
	time(T),
	path(P),
	path(P1),
	P < P1,
	br(G1,T,P,P1),
	br(G2,T,P,P1).

:- sense(G),
	time(T),
	path(P),
	path(P1),
	P1 < P,
	br(G,T,P1,P),
	used(T,P).

used(T+1,P) :-
	time(T),
	path(P),
	path(P1),
	sense(G),
	P1 <= P,
	br(G,T,P1,P).

holds(G,T+1,P) :-
	sense(G),
	time(T),
	path(P),
	path(P1),
	P1 <= P,
	br(G,T,P1,P).

holds(L,T+1,P) :-
	literal(L),
	time(T),
	path(P),
	path(P1),
	sense(G),
	P1 <= P,
	br(G,T,P1,P),
	holds(L,T,P1).

% Rules for generating action occurrences
1{occ(A,T,P):action(A)}1 :-
	time(T),
	path(P),
	used(T,P),
	not goal(T,P).

:- action(A),
	time(T),
	path(P),
	occ(A,T,P),
	not poss(A,T,P).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DOMAIN DEPENDENT RULES 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Executability conditions 
poss(dunk(p1,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p1)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p1,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p1)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(dunk(p2,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p2)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p2,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p2)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(dunk(p3,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p3)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p3,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p3)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(dunk(p4,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p4)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p4,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p4)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(dunk(p5,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p5)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p5,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p5)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(dunk(p6,t1),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p6)),T,P),
	holds(neg(clogged(t1)),T,P).
poss(dunk(p6,t2),T,P) :-
	time(T),
	path(P),
	holds(neg(dunked(p6)),T,P),
	holds(neg(clogged(t2)),T,P).
poss(flush(t1),T,P) :-
	time(T),
	path(P).
poss(flush(t2),T,P) :-
	time(T),
	path(P).

% Static laws 
holds(disarmed,T,P) :-
	time1(T),
	path(P),
	holds(neg(armed(p1)),T,P),
	holds(neg(armed(p2)),T,P),
	holds(neg(armed(p3)),T,P),
	holds(neg(armed(p4)),T,P),
	holds(neg(armed(p5)),T,P),
	holds(neg(armed(p6)),T,P).

e(disarmed,T+1,P) :-
	time(T),
	path(P),
	e(neg(armed(p1)),T+1,P),
	e(neg(armed(p2)),T+1,P),
	e(neg(armed(p3)),T+1,P),
	e(neg(armed(p4)),T+1,P),
	e(neg(armed(p5)),T+1,P),
	e(neg(armed(p6)),T+1,P).

pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p1)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).
pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p2)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).
pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p3)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).
pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p4)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).
pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p5)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).
pc(disarmed,T+1,P) :-
	time(T),
	path(P),
	pc(neg(armed(p6)),T+1,P),
	not holds(disarmed,T,P),
	not e(armed(p1),T+1,P),
	not e(armed(p2),T+1,P),
	not e(armed(p3),T+1,P),
	not e(armed(p4),T+1,P),
	not e(armed(p5),T+1,P),
	not e(armed(p6),T+1,P).


% Effects of non-sensing actions 
e(neg(armed(p1)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
pc(neg(armed(p1)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
e(neg(armed(p1)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
pc(neg(armed(p1)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
e(neg(armed(p2)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
pc(neg(armed(p2)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
e(neg(armed(p2)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
pc(neg(armed(p2)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
e(neg(armed(p3)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
pc(neg(armed(p3)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
e(neg(armed(p3)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
pc(neg(armed(p3)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
e(neg(armed(p4)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
pc(neg(armed(p4)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
e(neg(armed(p4)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
pc(neg(armed(p4)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
e(neg(armed(p5)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
pc(neg(armed(p5)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
e(neg(armed(p5)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
pc(neg(armed(p5)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
e(neg(armed(p6)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
pc(neg(armed(p6)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
e(neg(armed(p6)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
pc(neg(armed(p6)),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
e(dunked(p1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
pc(dunked(p1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
e(dunked(p1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
pc(dunked(p1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
e(dunked(p2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
pc(dunked(p2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
e(dunked(p2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
pc(dunked(p2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
e(dunked(p3),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
pc(dunked(p3),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
e(dunked(p3),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
pc(dunked(p3),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
e(dunked(p4),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
pc(dunked(p4),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
e(dunked(p4),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
pc(dunked(p4),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
e(dunked(p5),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
pc(dunked(p5),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
e(dunked(p5),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
pc(dunked(p5),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
e(dunked(p6),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
pc(dunked(p6),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
e(dunked(p6),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
pc(dunked(p6),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p1,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p2,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p3,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p4,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p5,t2),T,P).
e(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
pc(clogged(t1),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t1),T,P).
e(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
pc(clogged(t2),T+1,P) :-
	time(T),
	path(P),
	occ(dunk(p6,t2),T,P).
e(neg(clogged(t1)),T+1,P) :-
	time(T),
	path(P),
	occ(flush(t1),T,P).
pc(neg(clogged(t1)),T+1,P) :-
	time(T),
	path(P),
	occ(flush(t1),T,P).
e(neg(clogged(t2)),T+1,P) :-
	time(T),
	path(P),
	occ(flush(t2),T,P).
pc(neg(clogged(t2)),T+1,P) :-
	time(T),
	path(P),
	occ(flush(t2),T,P).

% Effects of sensing actions 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INITIAL STATE 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
holds(neg(dunked(p1)),1,1).
holds(neg(dunked(p2)),1,1).
holds(neg(dunked(p3)),1,1).
holds(neg(dunked(p4)),1,1).
holds(neg(dunked(p5)),1,1).
holds(neg(dunked(p6)),1,1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GOAL SPECIFICATION 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal(T,P) :-
	time1(T),
	path(P),
	holds(disarmed,T,P).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HIDE THE FOLLOWING ATOMS 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
hide time(T).
hide time1(T).
hide path(P).
hide fluent(F).
hide sense(F).
hide literal(L).
hide contrary(L1,L2).
hide action(A).
hide poss(A,T,P).
hide holds(L,T,P).
hide ph(L,T,P).
hide e(L,T,P).
hide pc(L,T,P).
hide new_br(P,P1).
hide used(T,P).
hide goal(T,P).
