% packages
pkg(p1).
pkg(p2).

% fluents
fluent(armed(P)) :-
	pkg(P).
fluent(dunked(P)) :-
	pkg(P).
fluent(clogged).
fluent(disarmed).

% actions
action(dunk(P)) :-
	pkg(P).
action(flush).

% executability conditions
executable(dunk(P),[neg(dunked(P)),neg(clogged)]) :-
	pkg(P).
executable(flush,[]).

% dynamic laws
causes(dunk(P),neg(armed(P)),[]) :-
	pkg(P).
causes(dunk(P),dunked(P),[]) :-
	pkg(P).
causes(dunk(P),clogged,[]) :-
	pkg(P).
causes(flush,neg(clogged),[]).

% static laws
caused(disarmed,L) :-
	findall(neg(armed(P)),pkg(P),L).

% initial state
initially(neg(dunked(P))) :-
	pkg(P).
initially(neg(clogged)).
initially(neg(disarmed)).

% goal
goal(disarmed).