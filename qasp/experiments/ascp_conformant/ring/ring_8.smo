%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Usage:                              
%     lparse -c h=<height> -c w=<width> | smodels
% The program consists of the following main predicates
%	holds(L,T,P) - if literal L holds at (T,P)
%	poss(A,T,P) - if action A is executable at (T,P)
%	occ(A,T,P) - if action A occurs at (T,P)
%	used(T,P) - if starting from T, the path P is 
%		used in constructing the plan.
%	br(g,T,P,P_1) - if there exists a branch from (T,P)
%		to (T+1,P_1)
%	goal(T,P) - if the goal is satisified at (T,P)
%	pc(L,T,P) - if L may change in the next state
%	e(L,T,P) - if literal L is an effect of some action
%		occuring at (T,P).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#domain fluent(F).
#domain literal(L;L1).
#domain sense(G;G1;G2).
#domain time(T).
#domain time1(T1).
#domain path(P;P1;P2).
#domain action(A).

% Input parameters
time(1..h).
time1(1..h+1).
path(1..w).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Action declarations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
action(fwd).
action(back).
action(close).
action(lock).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Fluent declarations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fluent(at(0)).
fluent(at(1)).
fluent(at(2)).
fluent(at(3)).
fluent(at(5)).
fluent(at(6)).
fluent(at(7)).
fluent(at(4)).
fluent(closed(0)).
fluent(closed(1)).
fluent(closed(2)).
fluent(closed(3)).
fluent(closed(5)).
fluent(closed(6)).
fluent(closed(7)).
fluent(closed(4)).
fluent(locked(0)).
fluent(locked(1)).
fluent(locked(2)).
fluent(locked(3)).
fluent(locked(5)).
fluent(locked(6)).
fluent(locked(7)).
fluent(locked(4)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DOMAIN INDEPENDENT RULES 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Auxiliary Rules
literal(F).

literal(neg(F)).


contrary(F,neg(F)).

contrary(neg(F),F).


used(1,1).

used(T+1,P) :-
	used(T,P).

% Goal representation

:- used(h+1,P),
	not goal(h+1,P).

% Inertial rules for non-sensing actions
holds(L,T+1,P) :-
	e(L,T+1,P).

holds(L,T+1,P) :-
	holds(L,T,P),
	contrary(L,L1),
	not pc(L1,T+1,P).

% Inertial rules for sensing actions
new_br(P,P1) :-
	P <= P1.

% Cannot branch to the same path
:- P1 < P2,
	P2 < P,
	br(G1,T,P1,P),
	br(G2,T,P2,P).

:- G1 != G2,
	P <= P1,
	br(G1,T,P,P1),
	br(G2,T,P,P1).

:- P1 < P,
	br(G,T,P1,P),
	used(T,P).

used(T+1,P) :-
	P1 < P,
	br(G,T,P1,P).

holds(G,T+1,P) :-
	P1 <= P,
	br(G,T,P1,P).

holds(L,T+1,P) :-
	P1 < P,
	br(G,T,P1,P),
	holds(L,T,P1).

% Rules for generating action occurrences
1{occ(X,T,P):action(X)}1 :-
	used(T,P),
	not goal(T,P).

:- occ(A,T,P),
	not poss(A,T,P).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DOMAIN DEPENDENT RULES 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Executability conditions 
poss(fwd,T,P).

poss(back,T,P).

poss(close,T,P).

poss(lock,T,P) :-
	holds(at(0),T,P),
	holds(closed(0),T,P).
poss(lock,T,P) :-
	holds(at(1),T,P),
	holds(closed(1),T,P).
poss(lock,T,P) :-
	holds(at(2),T,P),
	holds(closed(2),T,P).
poss(lock,T,P) :-
	holds(at(3),T,P),
	holds(closed(3),T,P).
poss(lock,T,P) :-
	holds(at(5),T,P),
	holds(closed(5),T,P).
poss(lock,T,P) :-
	holds(at(6),T,P),
	holds(closed(6),T,P).
poss(lock,T,P) :-
	holds(at(7),T,P),
	holds(closed(7),T,P).
poss(lock,T,P) :-
	holds(at(4),T,P),
	holds(closed(4),T,P).

% Static laws 

% Effects of non-sensing actions 
e(at(1),T+1,P) :-
	occ(fwd,T,P),
	holds(at(0),T,P).
pc(at(1),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(0)),T,P).
e(at(2),T+1,P) :-
	occ(fwd,T,P),
	holds(at(1),T,P).
pc(at(2),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(1)),T,P).
e(at(3),T+1,P) :-
	occ(fwd,T,P),
	holds(at(2),T,P).
pc(at(3),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(2)),T,P).
e(at(4),T+1,P) :-
	occ(fwd,T,P),
	holds(at(3),T,P).
pc(at(4),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(3)),T,P).
e(at(6),T+1,P) :-
	occ(fwd,T,P),
	holds(at(5),T,P).
pc(at(6),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(5)),T,P).
e(at(7),T+1,P) :-
	occ(fwd,T,P),
	holds(at(6),T,P).
pc(at(7),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(6)),T,P).
e(at(0),T+1,P) :-
	occ(fwd,T,P),
	holds(at(7),T,P).
pc(at(0),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(7)),T,P).
e(at(5),T+1,P) :-
	occ(fwd,T,P),
	holds(at(4),T,P).
pc(at(5),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(4)),T,P).
e(neg(at(0)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(0),T,P).
pc(neg(at(0)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(0)),T,P).
e(neg(at(1)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(1),T,P).
pc(neg(at(1)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(1)),T,P).
e(neg(at(2)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(2),T,P).
pc(neg(at(2)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(2)),T,P).
e(neg(at(3)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(3),T,P).
pc(neg(at(3)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(3)),T,P).
e(neg(at(5)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(5),T,P).
pc(neg(at(5)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(5)),T,P).
e(neg(at(6)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(6),T,P).
pc(neg(at(6)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(6)),T,P).
e(neg(at(7)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(7),T,P).
pc(neg(at(7)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(7)),T,P).
e(neg(at(4)),T+1,P) :-
	occ(fwd,T,P),
	holds(at(4),T,P).
pc(neg(at(4)),T+1,P) :-
	occ(fwd,T,P),
	not holds(neg(at(4)),T,P).
e(at(7),T+1,P) :-
	occ(back,T,P),
	holds(at(0),T,P).
pc(at(7),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(0)),T,P).
e(at(0),T+1,P) :-
	occ(back,T,P),
	holds(at(1),T,P).
pc(at(0),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(1)),T,P).
e(at(1),T+1,P) :-
	occ(back,T,P),
	holds(at(2),T,P).
pc(at(1),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(2)),T,P).
e(at(2),T+1,P) :-
	occ(back,T,P),
	holds(at(3),T,P).
pc(at(2),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(3)),T,P).
e(at(4),T+1,P) :-
	occ(back,T,P),
	holds(at(5),T,P).
pc(at(4),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(5)),T,P).
e(at(5),T+1,P) :-
	occ(back,T,P),
	holds(at(6),T,P).
pc(at(5),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(6)),T,P).
e(at(6),T+1,P) :-
	occ(back,T,P),
	holds(at(7),T,P).
pc(at(6),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(7)),T,P).
e(at(3),T+1,P) :-
	occ(back,T,P),
	holds(at(4),T,P).
pc(at(3),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(4)),T,P).
e(neg(at(0)),T+1,P) :-
	occ(back,T,P),
	holds(at(0),T,P).
pc(neg(at(0)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(0)),T,P).
e(neg(at(1)),T+1,P) :-
	occ(back,T,P),
	holds(at(1),T,P).
pc(neg(at(1)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(1)),T,P).
e(neg(at(2)),T+1,P) :-
	occ(back,T,P),
	holds(at(2),T,P).
pc(neg(at(2)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(2)),T,P).
e(neg(at(3)),T+1,P) :-
	occ(back,T,P),
	holds(at(3),T,P).
pc(neg(at(3)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(3)),T,P).
e(neg(at(5)),T+1,P) :-
	occ(back,T,P),
	holds(at(5),T,P).
pc(neg(at(5)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(5)),T,P).
e(neg(at(6)),T+1,P) :-
	occ(back,T,P),
	holds(at(6),T,P).
pc(neg(at(6)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(6)),T,P).
e(neg(at(7)),T+1,P) :-
	occ(back,T,P),
	holds(at(7),T,P).
pc(neg(at(7)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(7)),T,P).
e(neg(at(4)),T+1,P) :-
	occ(back,T,P),
	holds(at(4),T,P).
pc(neg(at(4)),T+1,P) :-
	occ(back,T,P),
	not holds(neg(at(4)),T,P).
e(closed(0),T+1,P) :-
	occ(close,T,P),
	holds(at(0),T,P).
pc(closed(0),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(0)),T,P).
e(closed(1),T+1,P) :-
	occ(close,T,P),
	holds(at(1),T,P).
pc(closed(1),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(1)),T,P).
e(closed(2),T+1,P) :-
	occ(close,T,P),
	holds(at(2),T,P).
pc(closed(2),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(2)),T,P).
e(closed(3),T+1,P) :-
	occ(close,T,P),
	holds(at(3),T,P).
pc(closed(3),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(3)),T,P).
e(closed(5),T+1,P) :-
	occ(close,T,P),
	holds(at(5),T,P).
pc(closed(5),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(5)),T,P).
e(closed(6),T+1,P) :-
	occ(close,T,P),
	holds(at(6),T,P).
pc(closed(6),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(6)),T,P).
e(closed(7),T+1,P) :-
	occ(close,T,P),
	holds(at(7),T,P).
pc(closed(7),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(7)),T,P).
e(closed(4),T+1,P) :-
	occ(close,T,P),
	holds(at(4),T,P).
pc(closed(4),T+1,P) :-
	occ(close,T,P),
	not holds(neg(at(4)),T,P).
e(locked(0),T+1,P) :-
	occ(lock,T,P),
	holds(at(0),T,P).
pc(locked(0),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(0)),T,P).
e(locked(1),T+1,P) :-
	occ(lock,T,P),
	holds(at(1),T,P).
pc(locked(1),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(1)),T,P).
e(locked(2),T+1,P) :-
	occ(lock,T,P),
	holds(at(2),T,P).
pc(locked(2),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(2)),T,P).
e(locked(3),T+1,P) :-
	occ(lock,T,P),
	holds(at(3),T,P).
pc(locked(3),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(3)),T,P).
e(locked(5),T+1,P) :-
	occ(lock,T,P),
	holds(at(5),T,P).
pc(locked(5),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(5)),T,P).
e(locked(6),T+1,P) :-
	occ(lock,T,P),
	holds(at(6),T,P).
pc(locked(6),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(6)),T,P).
e(locked(7),T+1,P) :-
	occ(lock,T,P),
	holds(at(7),T,P).
pc(locked(7),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(7)),T,P).
e(locked(4),T+1,P) :-
	occ(lock,T,P),
	holds(at(4),T,P).
pc(locked(4),T+1,P) :-
	occ(lock,T,P),
	not holds(neg(at(4)),T,P).

% Effects of sensing actions 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INITIAL STATE 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
holds(at(0),1,1).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GOAL SPECIFICATION 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
goal(T1,P) :-
	holds(locked(0),T1,P),
	holds(locked(1),T1,P),
	holds(locked(2),T1,P),
	holds(locked(3),T1,P),
	holds(locked(5),T1,P),
	holds(locked(6),T1,P),
	holds(locked(7),T1,P),
	holds(locked(4),T1,P).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HIDE THE FOLLOWING ATOMS 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
hide.
show occ(A,T,P).
show br(G,T,P,P1).
